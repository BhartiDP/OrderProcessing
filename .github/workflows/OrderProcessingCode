Staregy Design pattern we can use for behavior of services and bunddling togther along with it open for extension as using  Interface stratgey



public class ProductType
{
   public string ShippingAddress {get;set;}
   public string PNAME;
 public  string  PCODE;

   public ProdutType(string pname)
  { 
    this.PNAME;=pname;
 
  }
   
  public string getproductcode(string pname)
{  
   //get the code from DBLayer for prouctcode
   ProductDAL pl=new ProductDAL();
   PCODE= pl.getproductcode(pname);
   return pcode;
}
  

}


//DAL

public class ProductDAL 
{
  string pcode="";
  Sqlconnection sql;
  public string getproductcode(string pname)
{
   using(sql=new SqlConenction())
{
     //Dataset.ExceuteNonQuery()
     To get the product code from PRODuct DB

    pcode= Dataset.ExceuteNonQuery();

}
return pcode;
  

} 





public interface IOrderStrategy{
   public string GenerateSlip(string addresstoship);
}

public interface IMEmbershipNotificationUpgrade{
   public void SendEmail(customer c);
}

public class physicalProductRule : IOrderStrategy
{
   public string GenerateSlip(string address)
  {
      return address;
  }

}


public class bookRule : IOrderStrategy
{
   public string GenerateSlip(string address)
  {
      return address;
  }

}

public class MemberShipRule: IOrderStrategy,IMEmbershipNotificationUpgrade
{
   public string GenerateSlip(string address)
  {
      return address;
  }
 public string SendEmail(customer c)
{
   //SMTP logic to send email  to cusostomer  
}


public class Context

{
   private IOrderStrategy os;
    private readonly Product _product;
    private decimal _amount;
    provate string _address;
     
   public Context(IOrderStratgey os, Product p, string SA){
      this.os= os
     if(p!==null)
     this._product=p;
     this._address= SA;

  
   }

   public string  executeOrderRuleStratgey(string address){
      return os.GenerateSlip(address));
   }

}


Public class Customer
{
  //properties 

  first name,lastname , email id ,  custID;

}

public class PaymentOrderStrategyRule{
 
     
      Cusomer C=new Customer();
      
       string address = c.address;
 
      Context context = new Context(new physicalProductRule(),new Product(),address);		
      context.executeOrderRuleStratgey(address);

      context = new Context(new MemberShipRule(),new Product(),address);		
      context.executeOrderRuleStratgey(address);
       context = new Context(new bookRule(),new Product(),address);		
      context.executeOrderRuleStratgey(address);
      
   }
}





Unit test apporach :


//Get the contect object

pass below parameters :

Mockclass from IOrderstrategy - > in turn calls  from constructor  product classes and shipping address details

As per the product type
If productypecode==physicalproduct
 {
     
    GenerateSlip() method
}















